// boxdefines.h was generated by ProtoGen version 1.4.1.a

#ifndef _BOXDEFINES_H
#define _BOXDEFINES_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 * boxdefines.h is part of the ReverseGeocache protocol stack
 */

#include "ReverseGeocacheProtocol.h"

typedef struct
{
    unsigned locked : 1;       
    unsigned gpsConnection : 1; //!< 1 = GPS unit detected
    unsigned gpsStatus : 2;     //!< GPS Status
    unsigned charging : 1;      //!< Battery charging status
    unsigned debug : 1;        
}BoxStatus_t;

//! Encode a BoxStatus_t structure into a byte array
void encodeBoxStatus_t(uint8_t* data, int* bytecount, const BoxStatus_t* user);

//! Decode a BoxStatus_t structure from a byte array
int decodeBoxStatus_t(const uint8_t* data, int* bytecount, BoxStatus_t* user);

#define getMinLengthOfBoxStatus_t() (1)

typedef struct
{
    unsigned centerText : 1;
}ClueOptions_t;

//! Encode a ClueOptions_t structure into a byte array
void encodeClueOptions_t(uint8_t* data, int* bytecount, const ClueOptions_t* user);

//! Decode a ClueOptions_t structure from a byte array
int decodeClueOptions_t(const uint8_t* data, int* bytecount, ClueOptions_t* user);

#define getMinLengthOfClueOptions_t() (1)

typedef struct
{
    uint16_t    serialNumber;
    uint8_t     versionMajor;
    uint8_t     versionMinor;
    uint8_t     pcbRevision; 
    BoxStatus_t status;      
    uint8_t     charge;      
    uint8_t     currentClue; 
    uint8_t     totalClues;  
}BoxInfo_t;

//! Encode a BoxInfo_t structure into a byte array
void encodeBoxInfo_t(uint8_t* data, int* bytecount, const BoxInfo_t* user);

//! Decode a BoxInfo_t structure from a byte array
int decodeBoxInfo_t(const uint8_t* data, int* bytecount, BoxInfo_t* user);

#define getMinLengthOfBoxInfo_t() (9)

typedef struct
{
    float         lat;      
    float         lng;      
    uint16_t      threshold;
    ClueTypes     type;     
    ClueOptions_t options;  
}Waypoint_t;

//! Encode a Waypoint_t structure into a byte array
void encodeWaypoint_t(uint8_t* data, int* bytecount, const Waypoint_t* user);

//! Decode a Waypoint_t structure from a byte array
int decodeWaypoint_t(const uint8_t* data, int* bytecount, Waypoint_t* user);

#define getMinLengthOfWaypoint_t() (12)

#ifdef __cplusplus
}
#endif
#endif
